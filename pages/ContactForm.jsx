import React, { useEffect, useRef, useState } from 'react';
import emailjs from '@emailjs/browser';
import { Icon } from "@iconify/react";
import gsap from "gsap";
import Link from 'next/link';
import Head from 'next/head';
import CustomCursor from '@/components/CustomCursor';

function ContactForm() {
  const form = useRef();
  const [nameError, setNameError] = useState('');
  const [emailError, setEmailError] = useState('');
  const [subjectError, setSubjectError] = useState('');
  const [messageError, setMessageError] = useState('');
  const [sending, setSending] = useState(false);
  const [sentSuccessfully, setSentSuccessfully] = useState(false);
  const [sendError, setSendError] = useState('');
  const [emailNotification, setEmailNotification] = useState('');
  const [phoneNotification, setPhoneNotification] = useState('');

  const sendEmail = (e) => {
    e.preventDefault();

    const formData = new FormData(form.current);
    let hasEmptyFields = false;

    // Check each field and set the corresponding error message
    if (!formData.get('user_name')) {
      setNameError('Please enter your name.');
      hasEmptyFields = true;
    } else {
      setNameError('');
    }

    if (!formData.get('user_email')) {
      setEmailError('Please enter your email.');
      hasEmptyFields = true;
    } else {
      setEmailError('');
    }

    if (!formData.get('user_subject')) {
      setSubjectError('Please enter a subject.');
      hasEmptyFields = true;
    } else {
      setSubjectError('');
    }

    if (!formData.get('message')) {
      setMessageError('Please enter a message.');
      hasEmptyFields = true;
    } else {
      setMessageError('');
    }

    // If any field is empty, do not proceed with sending the email
    if (hasEmptyFields) {
      return;
    }

    setSending(true);

    // Send the email if all fields are filled
    emailjs
      .sendForm('service_ldl44lt', 'template_hj74fni', form.current, {
        publicKey: 'CWb3Du7BJVE1t1SeO',
      })
      .then(
        () => {
          setSentSuccessfully(true);
          setSending(false);
        },
        (error) => {
          setSendError('Failed to send the message. Please try again later.');
          setSending(false);
        },
      );
  };

  const handleInputChange = (e, setError) => {
    if (e.target.value) {
      setError('');
    }
  };

  const copyToClipboard = (text, type) => {
    navigator.clipboard.writeText(text)
      .then(() => {
        if (type === 'email') {
          setEmailNotification('Email copied to clipboard!');
          setTimeout(() => {
            setEmailNotification('');
          }, 2000); // Hide the email notification after 2 seconds
        } else if (type === 'phone') {
          setPhoneNotification('Phone Number copied to clipboard!');
          setTimeout(() => {
            setPhoneNotification('');
          }, 2000); // Hide the phone notification after 2 seconds
        }
      })
      .catch((error) => {
        console.error('Failed to copy:', error);
      });
  };

  useEffect(() => {
    // Set up GSAP fade out animation for success message
    if (sentSuccessfully) {
      gsap.fromTo(".success-message", { opacity: 0 }, { opacity: 1, duration: 0.5, delay: 1 });
      setTimeout(() => {
        setSentSuccessfully(false);
      }, 4000); // Hide the success message after 4 seconds
    }
  }, [sentSuccessfully]);

  return (
    <section className='contact-section'>
        <Head>
        <title>MÃ¡rio | Contact Page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/assets/Logo.png" />
      </Head>
      <CustomCursor />
      <div className="contact-form-container">
        
            <div className="contact-form-info-icon backbtn">
                <Link href="/">
                    <Icon className='icon' icon="mdi:arrow-back" color="#000" />
                </Link>
            </div>
        <div className="contact-form-title-container">
          <div className="contact-form-title">
            <h2 className="contact-form-title-header">CONTACT INFO</h2>
          </div>
        </div>
        <div className="contact-form-column">
          <div className="contact-form-info-container">
            <div className="contact-form-wrapper">
              <div className="contact-form-inside-wrapper">
                <div className="contact-form-info-row">
                  <div className="contact-form-inner-info-row">
                    <div className="contact-form-info-block">
                      <div className="contact-form-info-box">
                        <div className="contact-form-info-icon" onClick={() => copyToClipboard('marioviegas2001@gmail.com', 'email')}>
                          <Icon className='icon' icon="mdi:gmail" color="#000" />
                        </div>
                        <div className="contact-form-info-text">
                          <p><span>Email:</span> marioviegas2001@gmail.com</p>
                        </div>
                        {emailNotification && <div className="notification-box">{emailNotification}</div>}
                      </div>
                    </div>
                    <div className="contact-form-info-block">
                      <div className="contact-form-info-box">
                        <div className="contact-form-info-icon"  onClick={() => copyToClipboard('+351 917287136', 'phone')}>
                          <Icon className='icon' icon="mdi:phone" color="#000" />
                        </div>
                        <div className="contact-form-info-text">
                          <p><span>Phone Number:</span> +351 917287136</p>
                        </div>
                        {phoneNotification && <div className="notification-box">{phoneNotification}</div>}
                      </div>
                    </div>
                  </div>
                </div>
                <div className="contact-form-form-column">
                  <div className="contact-form-form-inner-column">
                    <h3 className="contact-form-form-title">Send me a message</h3>
                    {sentSuccessfully ? (
                      <div className='success-message'>Your message was sent. I will reach out to you as soon as possible!</div>
                    ) : (
                      <>
                        <form className='main-form' ref={form} onSubmit={sendEmail}>
                          <div className="contact-form-form">
                            <div className="form">
                              <div className="form-group">
                                <input type="text" className="form-control" name="user_name" id="name" placeholder="Name" onChange={(e) => handleInputChange(e, setNameError)} />
                                {nameError && <div style={{ color: 'red' }}>{nameError}</div>}
                              </div>
                            </div>
                            <div className="form">
                              <div className="form-group">
                                <input type="email" className="form-control" name="user_email" id="email" placeholder="Email" onChange={(e) => handleInputChange(e, setEmailError)} />
                                {emailError && <div style={{ color: 'red' }}>{emailError}</div>}
                              </div>
                            </div>
                            <div className="form">
                              <div className="form-group">
                                <input type="text" className="form-control" name="user_subject" id="subject" placeholder="Subject" onChange={(e) => handleInputChange(e, setSubjectError)} />
                                {subjectError && <div style={{ color: 'red' }}>{subjectError}</div>}
                              </div>
                            </div>
                            <div className="form">
                              <div className="form-group">
                                <textarea name="message" className="form-control" id="message" cols="30" rows="8" placeholder="Message" onChange={(e) => handleInputChange(e, setMessageError)}></textarea>
                                {messageError && <div style={{ color: 'red' }}>{messageError}</div>}
                              </div>
                            </div>
                            <div className="form">
                              <div className="form-group">
                                <input type="submit" value="Send" className="btn btn-primary" />
                                {sending && <div>Sending...</div>}
                                {sendError && <div style={{ color: 'red' }}>{sendError}</div>}
                              </div>
                            </div>
                          </div>
                        </form>
                      </>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}

export default ContactForm;
